/*
 * ts_triangle.h
 *
 *  Created on: May 31, 2015
 *      Author: zhou
 */

#ifndef TS_TRIANGLE_H_
#define TS_TRIANGLE_H_

#include "ts_define.h"
#include "ts_point.h"
#include "ts_vertex.h"
#include "ts_segment.h"
#include "ts_edge.h"

#include "ts_tri_moller.h"

namespace LarusTS
{

template<class TYPE, st DIM> class Surface;

template<class TYPE, st DIM>
class Triangle
{
public:
	typedef Triangle<TYPE, DIM> self_class;
	typedef st size_type;
	typedef Point<TYPE, DIM> Poi;
	typedef Poi* pPoi;
	typedef Segment<TYPE, DIM> Seg;
	typedef Seg* pSeg;
	typedef Edge<TYPE, DIM> Edg;
	typedef Edg* pEdg;
	typedef Vertex<TYPE, DIM> Ver;
	typedef Ver* pVer;
	typedef Triangle<TYPE, DIM> Tri;
	typedef Tri* pTri;
	typedef List<pSeg> list_pSeg;
	typedef List<pVer> list_pVer;
	typedef List<pTri> list_pTri;
public:
	pEdg e1;
	pEdg e2;
	pEdg e3;
protected:
	Int edges_check(pEdg a, pEdg b, pEdg c);
public:

	Triangle(pEdg a, pEdg b, pEdg c)
	{
		e1 = a;
		e2 = b;
		e3 = c;
		assert(edges_check(a, b, c) == NO_ERROR);
		e1->triangles.push_back(this);
		e2->triangles.push_back(this);
		e3->triangles.push_back(this);
	}

	pVer get_vertex1() const
	{
		return e1->v1;
	}
	pVer get_vertex2() const
	{
		return e1->v2;
	}
	pVer get_vertex3() const
	{
		return (e1->v1 == e2->v1) || (e1->v2 == e2->v1) ? e2->v2 : e2->v1;
	}

	// output ==================
	void output_vtk(const String& fn) const;

};
template<class TYPE, st DIM>
Int Triangle<TYPE, DIM>::edges_check(  //
		pEdg e1,   //
		pEdg e2,   //
		pEdg e3)
{ //
	_return_val_if_fail(e1 != nullptr, ERR_NULL_POINTER);
	_return_val_if_fail(e2 != nullptr, ERR_NULL_POINTER);
	_return_val_if_fail(e3 != nullptr, ERR_NULL_POINTER);
	_return_val_if_fail(e1 != e2 && e1 != e3 && e2 != e3, ERR_DEGERATE);

	if (e1->v1 == e2->v1) {
		_return_val_if_fail(segment_connect((e3), (e1->v2), (e2->v2)),
				ERR_OTHER);
	} else if (e1->v2 == e2->v1) {
		_return_val_if_fail(segment_connect((e3), (e1->v1), (e2->v2)),
				ERR_OTHER);
	} else if (e1->v2 == e2->v2) {
		_return_val_if_fail(segment_connect((e3), (e1->v1), (e2->v1)),
				ERR_OTHER);
	} else if (e1->v1 == e2->v2) {
		_return_val_if_fail(segment_connect((e3), (e1->v2), (e2->v1)),
				ERR_OTHER);
	}
	return NO_ERROR;
}
template<class TYPE, st DIM>
void Triangle<TYPE, DIM>::output_vtk(const String& fn) const
{
	FILE* fptr = fopen(fn.c_str(), "w"); //write
	if (fptr == NULL) {
		std::cerr << "!> Open file error! " << fn << " \n";
		exit(-1);
	}
	fprintf(fptr, "# vtk DataFile Version 2.0\n"
			"Generated by LarusTS\n"
			"ASCII\n"
			"DATASET POLYDATA\n"
			"POINTS %lu float\n", 3);
	Map<pVer, uInt> m_veridx;
	pVer ver1 = this->get_vertex1();
	pVer ver2 = this->get_vertex2();
	pVer ver3 = this->get_vertex3();

	fprintf(fptr, "%f %f %f \n", ver1->x(), ver1->y(), ver1->z());
	fprintf(fptr, "%f %f %f \n", ver2->x(), ver2->y(), ver2->z());
	fprintf(fptr, "%f %f %f \n", ver3->x(), ver3->y(), ver3->z());

	fprintf(fptr, "POLYGONS %lu %lu\n", 1, 4);
	fprintf(fptr, "3 %u %u %u\n", 0, 1, 2);
	fclose(fptr);
}

}
#endif /* TS_TS_TRIANGLE_H_ */
